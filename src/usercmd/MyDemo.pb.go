// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: MyDemo.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		MyDemo.proto

	It has these top-level messages:
		MoveC2SMsg
		MoveS2CMsg
		LoginC2SMsg
		LoginS2CMsg
		SearchC2SMsg
		MatchS2CMsg
		SearchS2CMsg
		GameStartS2CMsg
		ChangeColorS2CMsg
		GameEndS2CMsg
		GameEnergyS2CMsg
		SynTimeS2CMsg
		CreateItemsS2CMsg
		DestroyItemsS2CMsg
		GetItemS2CMsg
		UseItemC2SMsg
		DyeingS2CMsg
		DisDyeingS2CMsg
		VirusCreateS2CMsg
		VirusDestroyS2CMsg
		PlayerImprisonS2CMsg
		PlayerDizzyS2CMsg
		PlayerSpeedUpS2CMsg
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DemoTypeCmd int32

const (
	DemoTypeCmd_MoveReq        DemoTypeCmd = 1
	DemoTypeCmd_MoveRes        DemoTypeCmd = 2
	DemoTypeCmd_LoginReq       DemoTypeCmd = 3
	DemoTypeCmd_LoginRes       DemoTypeCmd = 4
	DemoTypeCmd_SearchReq      DemoTypeCmd = 5
	DemoTypeCmd_SearchRes      DemoTypeCmd = 6
	DemoTypeCmd_GameStart      DemoTypeCmd = 7
	DemoTypeCmd_ChangeColorRes DemoTypeCmd = 9
	DemoTypeCmd_GameEnd        DemoTypeCmd = 10
	DemoTypeCmd_GameEnergy     DemoTypeCmd = 11
	DemoTypeCmd_GameTime       DemoTypeCmd = 12
	DemoTypeCmd_ItemCreate     DemoTypeCmd = 13
	DemoTypeCmd_ItemDestroy    DemoTypeCmd = 14
	DemoTypeCmd_PlayerGetItem  DemoTypeCmd = 15
	DemoTypeCmd_PlayerUseItem  DemoTypeCmd = 16
	DemoTypeCmd_DyeingCmd      DemoTypeCmd = 17
	DemoTypeCmd_DisDyeingCmd   DemoTypeCmd = 18
	DemoTypeCmd_VirusCreate    DemoTypeCmd = 19
	DemoTypeCmd_VirusDestroy   DemoTypeCmd = 20
	DemoTypeCmd_PlayerImprison DemoTypeCmd = 21
	DemoTypeCmd_PlayerDizzy    DemoTypeCmd = 22
	DemoTypeCmd_MatchRes       DemoTypeCmd = 23
	DemoTypeCmd_PlayerSpeedUp  DemoTypeCmd = 24
)

var DemoTypeCmd_name = map[int32]string{
	1:  "MoveReq",
	2:  "MoveRes",
	3:  "LoginReq",
	4:  "LoginRes",
	5:  "SearchReq",
	6:  "SearchRes",
	7:  "GameStart",
	9:  "ChangeColorRes",
	10: "GameEnd",
	11: "GameEnergy",
	12: "GameTime",
	13: "ItemCreate",
	14: "ItemDestroy",
	15: "PlayerGetItem",
	16: "PlayerUseItem",
	17: "DyeingCmd",
	18: "DisDyeingCmd",
	19: "VirusCreate",
	20: "VirusDestroy",
	21: "PlayerImprison",
	22: "PlayerDizzy",
	23: "MatchRes",
	24: "PlayerSpeedUp",
}
var DemoTypeCmd_value = map[string]int32{
	"MoveReq":        1,
	"MoveRes":        2,
	"LoginReq":       3,
	"LoginRes":       4,
	"SearchReq":      5,
	"SearchRes":      6,
	"GameStart":      7,
	"ChangeColorRes": 9,
	"GameEnd":        10,
	"GameEnergy":     11,
	"GameTime":       12,
	"ItemCreate":     13,
	"ItemDestroy":    14,
	"PlayerGetItem":  15,
	"PlayerUseItem":  16,
	"DyeingCmd":      17,
	"DisDyeingCmd":   18,
	"VirusCreate":    19,
	"VirusDestroy":   20,
	"PlayerImprison": 21,
	"PlayerDizzy":    22,
	"MatchRes":       23,
	"PlayerSpeedUp":  24,
}

func (x DemoTypeCmd) Enum() *DemoTypeCmd {
	p := new(DemoTypeCmd)
	*p = x
	return p
}
func (x DemoTypeCmd) String() string {
	return proto.EnumName(DemoTypeCmd_name, int32(x))
}
func (x *DemoTypeCmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DemoTypeCmd_value, data, "DemoTypeCmd")
	if err != nil {
		return err
	}
	*x = DemoTypeCmd(value)
	return nil
}
func (DemoTypeCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{0} }

type MoveType int32

const (
	MoveType_idle  MoveType = 0
	MoveType_left  MoveType = 1
	MoveType_right MoveType = 2
)

var MoveType_name = map[int32]string{
	0: "idle",
	1: "left",
	2: "right",
}
var MoveType_value = map[string]int32{
	"idle":  0,
	"left":  1,
	"right": 2,
}

func (x MoveType) Enum() *MoveType {
	p := new(MoveType)
	*p = x
	return p
}
func (x MoveType) String() string {
	return proto.EnumName(MoveType_name, int32(x))
}
func (x *MoveType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MoveType_value, data, "MoveType")
	if err != nil {
		return err
	}
	*x = MoveType(value)
	return nil
}
func (MoveType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{1} }

type ColorType int32

const (
	ColorType_origin ColorType = 0
	ColorType_red    ColorType = 1
	ColorType_yellow ColorType = 2
	ColorType_blue   ColorType = 3
)

var ColorType_name = map[int32]string{
	0: "origin",
	1: "red",
	2: "yellow",
	3: "blue",
}
var ColorType_value = map[string]int32{
	"origin": 0,
	"red":    1,
	"yellow": 2,
	"blue":   3,
}

func (x ColorType) Enum() *ColorType {
	p := new(ColorType)
	*p = x
	return p
}
func (x ColorType) String() string {
	return proto.EnumName(ColorType_name, int32(x))
}
func (x *ColorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ColorType_value, data, "ColorType")
	if err != nil {
		return err
	}
	*x = ColorType(value)
	return nil
}
func (ColorType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{2} }

type ItemType int32

const (
	ItemType_unknown ItemType = 0
	ItemType_virus   ItemType = 1
	ItemType_dyeing  ItemType = 2
	ItemType_dizzy   ItemType = 3
	ItemType_speedup ItemType = 4
)

var ItemType_name = map[int32]string{
	0: "unknown",
	1: "virus",
	2: "dyeing",
	3: "dizzy",
	4: "speedup",
}
var ItemType_value = map[string]int32{
	"unknown": 0,
	"virus":   1,
	"dyeing":  2,
	"dizzy":   3,
	"speedup": 4,
}

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}
func (x ItemType) String() string {
	return proto.EnumName(ItemType_name, int32(x))
}
func (x *ItemType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ItemType_value, data, "ItemType")
	if err != nil {
		return err
	}
	*x = ItemType(value)
	return nil
}
func (ItemType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{3} }

// 客户端发送当前位置
type MoveC2SMsg struct {
	PlayerId uint32   `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	PosX     float32  `protobuf:"fixed32,2,req,name=posX" json:"posX"`
	PosY     float32  `protobuf:"fixed32,3,req,name=posY" json:"posY"`
	PosZ     float32  `protobuf:"fixed32,4,req,name=posZ" json:"posZ"`
	MType    MoveType `protobuf:"varint,5,req,name=mType,enum=usercmd.MoveType" json:"mType"`
}

func (m *MoveC2SMsg) Reset()                    { *m = MoveC2SMsg{} }
func (m *MoveC2SMsg) String() string            { return proto.CompactTextString(m) }
func (*MoveC2SMsg) ProtoMessage()               {}
func (*MoveC2SMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{0} }

func (m *MoveC2SMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *MoveC2SMsg) GetPosX() float32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *MoveC2SMsg) GetPosY() float32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *MoveC2SMsg) GetPosZ() float32 {
	if m != nil {
		return m.PosZ
	}
	return 0
}

func (m *MoveC2SMsg) GetMType() MoveType {
	if m != nil {
		return m.MType
	}
	return MoveType_idle
}

// 服务器广播房间内该玩家位置
type MoveS2CMsg struct {
	PlayerId uint32   `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	PosX     float32  `protobuf:"fixed32,2,req,name=posX" json:"posX"`
	PosY     float32  `protobuf:"fixed32,3,req,name=posY" json:"posY"`
	PosZ     float32  `protobuf:"fixed32,4,req,name=posZ" json:"posZ"`
	Row      uint32   `protobuf:"varint,5,req,name=row" json:"row"`
	Col      uint32   `protobuf:"varint,6,req,name=col" json:"col"`
	MType    MoveType `protobuf:"varint,7,req,name=mType,enum=usercmd.MoveType" json:"mType"`
}

func (m *MoveS2CMsg) Reset()                    { *m = MoveS2CMsg{} }
func (m *MoveS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*MoveS2CMsg) ProtoMessage()               {}
func (*MoveS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{1} }

func (m *MoveS2CMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *MoveS2CMsg) GetPosX() float32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *MoveS2CMsg) GetPosY() float32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *MoveS2CMsg) GetPosZ() float32 {
	if m != nil {
		return m.PosZ
	}
	return 0
}

func (m *MoveS2CMsg) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *MoveS2CMsg) GetCol() uint32 {
	if m != nil {
		return m.Col
	}
	return 0
}

func (m *MoveS2CMsg) GetMType() MoveType {
	if m != nil {
		return m.MType
	}
	return MoveType_idle
}

// 客户端发送登录请求  name = 玩家 + random(1~999)
// 比如叫玩家233或者玩家012
type LoginC2SMsg struct {
	Name string `protobuf:"bytes,1,req,name=name" json:"name"`
}

func (m *LoginC2SMsg) Reset()                    { *m = LoginC2SMsg{} }
func (m *LoginC2SMsg) String() string            { return proto.CompactTextString(m) }
func (*LoginC2SMsg) ProtoMessage()               {}
func (*LoginC2SMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{2} }

func (m *LoginC2SMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 服务器判断回传登陆响应
// 玩家的个人id
type LoginS2CMsg struct {
	PlayerId uint32 `protobuf:"varint,1,req,name=playerId" json:"playerId"`
}

func (m *LoginS2CMsg) Reset()                    { *m = LoginS2CMsg{} }
func (m *LoginS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*LoginS2CMsg) ProtoMessage()               {}
func (*LoginS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{3} }

func (m *LoginS2CMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// 客户端请求游戏匹配
type SearchC2SMsg struct {
	PlayerId uint32 `protobuf:"varint,1,req,name=playerId" json:"playerId"`
}

func (m *SearchC2SMsg) Reset()                    { *m = SearchC2SMsg{} }
func (m *SearchC2SMsg) String() string            { return proto.CompactTextString(m) }
func (*SearchC2SMsg) ProtoMessage()               {}
func (*SearchC2SMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{4} }

func (m *SearchC2SMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

// 服务器主动推送
// 匹配中的信息
type MatchS2CMsg struct {
	CurrentNum uint32 `protobuf:"varint,1,req,name=currentNum" json:"currentNum"`
	TotalNum   uint32 `protobuf:"varint,2,req,name=totalNum" json:"totalNum"`
}

func (m *MatchS2CMsg) Reset()                    { *m = MatchS2CMsg{} }
func (m *MatchS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*MatchS2CMsg) ProtoMessage()               {}
func (*MatchS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{5} }

func (m *MatchS2CMsg) GetCurrentNum() uint32 {
	if m != nil {
		return m.CurrentNum
	}
	return 0
}

func (m *MatchS2CMsg) GetTotalNum() uint32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

// 服务器通知匹配信息
type SearchS2CMsg struct {
	RoomId uint32                `protobuf:"varint,1,req,name=roomId" json:"roomId"`
	Nums   []*SearchS2CMsgPlayer `protobuf:"bytes,2,rep,name=nums" json:"nums,omitempty"`
}

func (m *SearchS2CMsg) Reset()                    { *m = SearchS2CMsg{} }
func (m *SearchS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*SearchS2CMsg) ProtoMessage()               {}
func (*SearchS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{6} }

func (m *SearchS2CMsg) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *SearchS2CMsg) GetNums() []*SearchS2CMsgPlayer {
	if m != nil {
		return m.Nums
	}
	return nil
}

type SearchS2CMsgPlayer struct {
	PlayerId uint32 `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	Name     string `protobuf:"bytes,2,req,name=name" json:"name"`
}

func (m *SearchS2CMsgPlayer) Reset()                    { *m = SearchS2CMsgPlayer{} }
func (m *SearchS2CMsgPlayer) String() string            { return proto.CompactTextString(m) }
func (*SearchS2CMsgPlayer) ProtoMessage()               {}
func (*SearchS2CMsgPlayer) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{6, 0} }

func (m *SearchS2CMsgPlayer) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *SearchS2CMsgPlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 服务器主动推送
// 游戏开始消息用于初始化信息  目前 是推送每个玩家角色的出生位置
type GameStartS2CMsg struct {
	Nums    []*GameStartS2CMsgPosition `protobuf:"bytes,1,rep,name=nums" json:"nums,omitempty"`
	Edgenum uint32                     `protobuf:"varint,2,req,name=edgenum" json:"edgenum"`
}

func (m *GameStartS2CMsg) Reset()                    { *m = GameStartS2CMsg{} }
func (m *GameStartS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*GameStartS2CMsg) ProtoMessage()               {}
func (*GameStartS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{7} }

func (m *GameStartS2CMsg) GetNums() []*GameStartS2CMsgPosition {
	if m != nil {
		return m.Nums
	}
	return nil
}

func (m *GameStartS2CMsg) GetEdgenum() uint32 {
	if m != nil {
		return m.Edgenum
	}
	return 0
}

type GameStartS2CMsgPosition struct {
	PlayerId uint32    `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	Row      uint32    `protobuf:"varint,2,req,name=row" json:"row"`
	Col      uint32    `protobuf:"varint,3,req,name=col" json:"col"`
	Color    ColorType `protobuf:"varint,4,req,name=color,enum=usercmd.ColorType" json:"color"`
}

func (m *GameStartS2CMsgPosition) Reset()                    { *m = GameStartS2CMsgPosition{} }
func (m *GameStartS2CMsgPosition) String() string            { return proto.CompactTextString(m) }
func (*GameStartS2CMsgPosition) ProtoMessage()               {}
func (*GameStartS2CMsgPosition) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{7, 0} }

func (m *GameStartS2CMsgPosition) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameStartS2CMsgPosition) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *GameStartS2CMsgPosition) GetCol() uint32 {
	if m != nil {
		return m.Col
	}
	return 0
}

func (m *GameStartS2CMsgPosition) GetColor() ColorType {
	if m != nil {
		return m.Color
	}
	return ColorType_origin
}

// 服务器广播  变色方块位置
type ChangeColorS2CMsg struct {
	Color ColorType `protobuf:"varint,1,req,name=color,enum=usercmd.ColorType" json:"color"`
	Row   uint32    `protobuf:"varint,2,req,name=row" json:"row"`
	Col   uint32    `protobuf:"varint,3,req,name=col" json:"col"`
}

func (m *ChangeColorS2CMsg) Reset()                    { *m = ChangeColorS2CMsg{} }
func (m *ChangeColorS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*ChangeColorS2CMsg) ProtoMessage()               {}
func (*ChangeColorS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{8} }

func (m *ChangeColorS2CMsg) GetColor() ColorType {
	if m != nil {
		return m.Color
	}
	return ColorType_origin
}

func (m *ChangeColorS2CMsg) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *ChangeColorS2CMsg) GetCol() uint32 {
	if m != nil {
		return m.Col
	}
	return 0
}

// 服务器主动推送
// 游戏倒计时1分钟后结束主动发送的消息
type GameEndS2CMsg struct {
	Nums     []*GameEndS2CMsgPlayerMsg `protobuf:"bytes,1,rep,name=nums" json:"nums,omitempty"`
	WinColor ColorType                 `protobuf:"varint,2,req,name=winColor,enum=usercmd.ColorType" json:"winColor"`
	Mvpid    uint32                    `protobuf:"varint,3,req,name=mvpid" json:"mvpid"`
}

func (m *GameEndS2CMsg) Reset()                    { *m = GameEndS2CMsg{} }
func (m *GameEndS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*GameEndS2CMsg) ProtoMessage()               {}
func (*GameEndS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{9} }

func (m *GameEndS2CMsg) GetNums() []*GameEndS2CMsgPlayerMsg {
	if m != nil {
		return m.Nums
	}
	return nil
}

func (m *GameEndS2CMsg) GetWinColor() ColorType {
	if m != nil {
		return m.WinColor
	}
	return ColorType_origin
}

func (m *GameEndS2CMsg) GetMvpid() uint32 {
	if m != nil {
		return m.Mvpid
	}
	return 0
}

type GameEndS2CMsgPlayerMsg struct {
	PlayerId uint32    `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	Name     string    `protobuf:"bytes,2,req,name=name" json:"name"`
	Cellnum  uint32    `protobuf:"varint,3,req,name=cellnum" json:"cellnum"`
	Color    ColorType `protobuf:"varint,4,req,name=color,enum=usercmd.ColorType" json:"color"`
}

func (m *GameEndS2CMsgPlayerMsg) Reset()                    { *m = GameEndS2CMsgPlayerMsg{} }
func (m *GameEndS2CMsgPlayerMsg) String() string            { return proto.CompactTextString(m) }
func (*GameEndS2CMsgPlayerMsg) ProtoMessage()               {}
func (*GameEndS2CMsgPlayerMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{9, 0} }

func (m *GameEndS2CMsgPlayerMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameEndS2CMsgPlayerMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameEndS2CMsgPlayerMsg) GetCellnum() uint32 {
	if m != nil {
		return m.Cellnum
	}
	return 0
}

func (m *GameEndS2CMsgPlayerMsg) GetColor() ColorType {
	if m != nil {
		return m.Color
	}
	return ColorType_origin
}

// 服务器主动推送
// 能量条信息
type GameEnergyS2CMsg struct {
	Color     ColorType `protobuf:"varint,1,req,name=color,enum=usercmd.ColorType" json:"color"`
	Status    uint32    `protobuf:"varint,2,req,name=status" json:"status"`
	LastColor ColorType `protobuf:"varint,3,req,name=lastColor,enum=usercmd.ColorType" json:"lastColor"`
}

func (m *GameEnergyS2CMsg) Reset()                    { *m = GameEnergyS2CMsg{} }
func (m *GameEnergyS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*GameEnergyS2CMsg) ProtoMessage()               {}
func (*GameEnergyS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{10} }

func (m *GameEnergyS2CMsg) GetColor() ColorType {
	if m != nil {
		return m.Color
	}
	return ColorType_origin
}

func (m *GameEnergyS2CMsg) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GameEnergyS2CMsg) GetLastColor() ColorType {
	if m != nil {
		return m.LastColor
	}
	return ColorType_origin
}

// 服务器主动推送
// 时间同步
type SynTimeS2CMsg struct {
	Tloop  uint32 `protobuf:"varint,1,req,name=tloop" json:"tloop"`
	Minute uint32 `protobuf:"varint,2,req,name=minute" json:"minute"`
	Second uint32 `protobuf:"varint,3,req,name=second" json:"second"`
}

func (m *SynTimeS2CMsg) Reset()                    { *m = SynTimeS2CMsg{} }
func (m *SynTimeS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*SynTimeS2CMsg) ProtoMessage()               {}
func (*SynTimeS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{11} }

func (m *SynTimeS2CMsg) GetTloop() uint32 {
	if m != nil {
		return m.Tloop
	}
	return 0
}

func (m *SynTimeS2CMsg) GetMinute() uint32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *SynTimeS2CMsg) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

// 服务器主动推送
// 道具随机生成
type CreateItemsS2CMsg struct {
	Row  uint32   `protobuf:"varint,1,req,name=row" json:"row"`
	Col  uint32   `protobuf:"varint,2,req,name=col" json:"col"`
	Item ItemType `protobuf:"varint,3,req,name=item,enum=usercmd.ItemType" json:"item"`
}

func (m *CreateItemsS2CMsg) Reset()                    { *m = CreateItemsS2CMsg{} }
func (m *CreateItemsS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*CreateItemsS2CMsg) ProtoMessage()               {}
func (*CreateItemsS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{12} }

func (m *CreateItemsS2CMsg) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *CreateItemsS2CMsg) GetCol() uint32 {
	if m != nil {
		return m.Col
	}
	return 0
}

func (m *CreateItemsS2CMsg) GetItem() ItemType {
	if m != nil {
		return m.Item
	}
	return ItemType_unknown
}

// 服务器主动推送
// 道具销毁  可能是玩家吃了这个道具  也可能是到了刷新时间，道具被刷新
type DestroyItemsS2CMsg struct {
	Row uint32 `protobuf:"varint,1,req,name=row" json:"row"`
	Col uint32 `protobuf:"varint,2,req,name=col" json:"col"`
}

func (m *DestroyItemsS2CMsg) Reset()                    { *m = DestroyItemsS2CMsg{} }
func (m *DestroyItemsS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*DestroyItemsS2CMsg) ProtoMessage()               {}
func (*DestroyItemsS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{13} }

func (m *DestroyItemsS2CMsg) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *DestroyItemsS2CMsg) GetCol() uint32 {
	if m != nil {
		return m.Col
	}
	return 0
}

// 服务器主动推送
// 玩家获得的道具类型
type GetItemS2CMsg struct {
	Item ItemType `protobuf:"varint,1,req,name=item,enum=usercmd.ItemType" json:"item"`
}

func (m *GetItemS2CMsg) Reset()                    { *m = GetItemS2CMsg{} }
func (m *GetItemS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*GetItemS2CMsg) ProtoMessage()               {}
func (*GetItemS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{14} }

func (m *GetItemS2CMsg) GetItem() ItemType {
	if m != nil {
		return m.Item
	}
	return ItemType_unknown
}

// 客户端发送使用道具的请求
type UseItemC2SMsg struct {
	Item ItemType `protobuf:"varint,1,req,name=item,enum=usercmd.ItemType" json:"item"`
}

func (m *UseItemC2SMsg) Reset()                    { *m = UseItemC2SMsg{} }
func (m *UseItemC2SMsg) String() string            { return proto.CompactTextString(m) }
func (*UseItemC2SMsg) ProtoMessage()               {}
func (*UseItemC2SMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{15} }

func (m *UseItemC2SMsg) GetItem() ItemType {
	if m != nil {
		return m.Item
	}
	return ItemType_unknown
}

// 服务器主动推送
// 玩家染色消息
type DyeingS2CMsg struct {
	PassiveId uint32    `protobuf:"varint,1,req,name=passiveId" json:"passiveId"`
	ActiveId  uint32    `protobuf:"varint,2,req,name=activeId" json:"activeId"`
	Color     ColorType `protobuf:"varint,3,req,name=color,enum=usercmd.ColorType" json:"color"`
}

func (m *DyeingS2CMsg) Reset()                    { *m = DyeingS2CMsg{} }
func (m *DyeingS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*DyeingS2CMsg) ProtoMessage()               {}
func (*DyeingS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{16} }

func (m *DyeingS2CMsg) GetPassiveId() uint32 {
	if m != nil {
		return m.PassiveId
	}
	return 0
}

func (m *DyeingS2CMsg) GetActiveId() uint32 {
	if m != nil {
		return m.ActiveId
	}
	return 0
}

func (m *DyeingS2CMsg) GetColor() ColorType {
	if m != nil {
		return m.Color
	}
	return ColorType_origin
}

// 服务器主动推送
// 玩家解除染色消息
type DisDyeingS2CMsg struct {
	PassiveId uint32    `protobuf:"varint,1,req,name=passiveId" json:"passiveId"`
	Color     ColorType `protobuf:"varint,2,req,name=color,enum=usercmd.ColorType" json:"color"`
}

func (m *DisDyeingS2CMsg) Reset()                    { *m = DisDyeingS2CMsg{} }
func (m *DisDyeingS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*DisDyeingS2CMsg) ProtoMessage()               {}
func (*DisDyeingS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{17} }

func (m *DisDyeingS2CMsg) GetPassiveId() uint32 {
	if m != nil {
		return m.PassiveId
	}
	return 0
}

func (m *DisDyeingS2CMsg) GetColor() ColorType {
	if m != nil {
		return m.Color
	}
	return ColorType_origin
}

// 服务器主动推送
// 创建病毒陷阱
type VirusCreateS2CMsg struct {
	PlayerId uint32 `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	Row      uint32 `protobuf:"varint,2,req,name=row" json:"row"`
	Col      uint32 `protobuf:"varint,3,req,name=col" json:"col"`
}

func (m *VirusCreateS2CMsg) Reset()                    { *m = VirusCreateS2CMsg{} }
func (m *VirusCreateS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*VirusCreateS2CMsg) ProtoMessage()               {}
func (*VirusCreateS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{18} }

func (m *VirusCreateS2CMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *VirusCreateS2CMsg) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *VirusCreateS2CMsg) GetCol() uint32 {
	if m != nil {
		return m.Col
	}
	return 0
}

// 服务器主动推送
// 销毁病毒陷阱
type VirusDestroyS2CMsg struct {
	Row uint32 `protobuf:"varint,1,req,name=row" json:"row"`
	Col uint32 `protobuf:"varint,2,req,name=col" json:"col"`
}

func (m *VirusDestroyS2CMsg) Reset()                    { *m = VirusDestroyS2CMsg{} }
func (m *VirusDestroyS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*VirusDestroyS2CMsg) ProtoMessage()               {}
func (*VirusDestroyS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{19} }

func (m *VirusDestroyS2CMsg) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *VirusDestroyS2CMsg) GetCol() uint32 {
	if m != nil {
		return m.Col
	}
	return 0
}

// 服务器主动推送
// 玩家禁锢
type PlayerImprisonS2CMsg struct {
	PlayerId uint32 `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	Time     uint32 `protobuf:"varint,2,req,name=time" json:"time"`
}

func (m *PlayerImprisonS2CMsg) Reset()                    { *m = PlayerImprisonS2CMsg{} }
func (m *PlayerImprisonS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*PlayerImprisonS2CMsg) ProtoMessage()               {}
func (*PlayerImprisonS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{20} }

func (m *PlayerImprisonS2CMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerImprisonS2CMsg) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 服务器主动推送
// 玩家神魂颠倒  控制反转
type PlayerDizzyS2CMsg struct {
	PlayerId uint32 `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	Time     uint32 `protobuf:"varint,2,req,name=time" json:"time"`
}

func (m *PlayerDizzyS2CMsg) Reset()                    { *m = PlayerDizzyS2CMsg{} }
func (m *PlayerDizzyS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*PlayerDizzyS2CMsg) ProtoMessage()               {}
func (*PlayerDizzyS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{21} }

func (m *PlayerDizzyS2CMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerDizzyS2CMsg) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 服务器主动推送
// 玩家加速
type PlayerSpeedUpS2CMsg struct {
	PlayerId uint32 `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	Time     uint32 `protobuf:"varint,2,req,name=time" json:"time"`
	SpeedNum uint32 `protobuf:"varint,3,req,name=speedNum" json:"speedNum"`
}

func (m *PlayerSpeedUpS2CMsg) Reset()                    { *m = PlayerSpeedUpS2CMsg{} }
func (m *PlayerSpeedUpS2CMsg) String() string            { return proto.CompactTextString(m) }
func (*PlayerSpeedUpS2CMsg) ProtoMessage()               {}
func (*PlayerSpeedUpS2CMsg) Descriptor() ([]byte, []int) { return fileDescriptorMyDemo, []int{22} }

func (m *PlayerSpeedUpS2CMsg) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerSpeedUpS2CMsg) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PlayerSpeedUpS2CMsg) GetSpeedNum() uint32 {
	if m != nil {
		return m.SpeedNum
	}
	return 0
}

func init() {
	proto.RegisterType((*MoveC2SMsg)(nil), "usercmd.MoveC2SMsg")
	proto.RegisterType((*MoveS2CMsg)(nil), "usercmd.MoveS2CMsg")
	proto.RegisterType((*LoginC2SMsg)(nil), "usercmd.LoginC2SMsg")
	proto.RegisterType((*LoginS2CMsg)(nil), "usercmd.LoginS2CMsg")
	proto.RegisterType((*SearchC2SMsg)(nil), "usercmd.SearchC2SMsg")
	proto.RegisterType((*MatchS2CMsg)(nil), "usercmd.MatchS2CMsg")
	proto.RegisterType((*SearchS2CMsg)(nil), "usercmd.SearchS2CMsg")
	proto.RegisterType((*SearchS2CMsgPlayer)(nil), "usercmd.SearchS2CMsg.player")
	proto.RegisterType((*GameStartS2CMsg)(nil), "usercmd.GameStartS2CMsg")
	proto.RegisterType((*GameStartS2CMsgPosition)(nil), "usercmd.GameStartS2CMsg.position")
	proto.RegisterType((*ChangeColorS2CMsg)(nil), "usercmd.ChangeColorS2CMsg")
	proto.RegisterType((*GameEndS2CMsg)(nil), "usercmd.GameEndS2CMsg")
	proto.RegisterType((*GameEndS2CMsgPlayerMsg)(nil), "usercmd.GameEndS2CMsg.playerMsg")
	proto.RegisterType((*GameEnergyS2CMsg)(nil), "usercmd.GameEnergyS2CMsg")
	proto.RegisterType((*SynTimeS2CMsg)(nil), "usercmd.SynTimeS2CMsg")
	proto.RegisterType((*CreateItemsS2CMsg)(nil), "usercmd.CreateItemsS2CMsg")
	proto.RegisterType((*DestroyItemsS2CMsg)(nil), "usercmd.DestroyItemsS2CMsg")
	proto.RegisterType((*GetItemS2CMsg)(nil), "usercmd.GetItemS2CMsg")
	proto.RegisterType((*UseItemC2SMsg)(nil), "usercmd.UseItemC2SMsg")
	proto.RegisterType((*DyeingS2CMsg)(nil), "usercmd.DyeingS2CMsg")
	proto.RegisterType((*DisDyeingS2CMsg)(nil), "usercmd.DisDyeingS2CMsg")
	proto.RegisterType((*VirusCreateS2CMsg)(nil), "usercmd.VirusCreateS2CMsg")
	proto.RegisterType((*VirusDestroyS2CMsg)(nil), "usercmd.VirusDestroyS2CMsg")
	proto.RegisterType((*PlayerImprisonS2CMsg)(nil), "usercmd.PlayerImprisonS2CMsg")
	proto.RegisterType((*PlayerDizzyS2CMsg)(nil), "usercmd.PlayerDizzyS2CMsg")
	proto.RegisterType((*PlayerSpeedUpS2CMsg)(nil), "usercmd.PlayerSpeedUpS2CMsg")
	proto.RegisterEnum("usercmd.DemoTypeCmd", DemoTypeCmd_name, DemoTypeCmd_value)
	proto.RegisterEnum("usercmd.MoveType", MoveType_name, MoveType_value)
	proto.RegisterEnum("usercmd.ColorType", ColorType_name, ColorType_value)
	proto.RegisterEnum("usercmd.ItemType", ItemType_name, ItemType_value)
}
func (m *MoveC2SMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveC2SMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32MyDemo(dAtA, i, uint32(math.Float32bits(float32(m.PosX))))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32MyDemo(dAtA, i, uint32(math.Float32bits(float32(m.PosY))))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32MyDemo(dAtA, i, uint32(math.Float32bits(float32(m.PosZ))))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.MType))
	return i, nil
}

func (m *MoveS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32MyDemo(dAtA, i, uint32(math.Float32bits(float32(m.PosX))))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32MyDemo(dAtA, i, uint32(math.Float32bits(float32(m.PosY))))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32MyDemo(dAtA, i, uint32(math.Float32bits(float32(m.PosZ))))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Row))
	dAtA[i] = 0x30
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Col))
	dAtA[i] = 0x38
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.MType))
	return i, nil
}

func (m *LoginC2SMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginC2SMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *LoginS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	return i, nil
}

func (m *SearchC2SMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchC2SMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	return i, nil
}

func (m *MatchS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.CurrentNum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.TotalNum))
	return i, nil
}

func (m *SearchS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.RoomId))
	if len(m.Nums) > 0 {
		for _, msg := range m.Nums {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMyDemo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SearchS2CMsgPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchS2CMsgPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *GameStartS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameStartS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nums) > 0 {
		for _, msg := range m.Nums {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMyDemo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Edgenum))
	return i, nil
}

func (m *GameStartS2CMsgPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameStartS2CMsgPosition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Row))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Col))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Color))
	return i, nil
}

func (m *ChangeColorS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeColorS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Color))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Row))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Col))
	return i, nil
}

func (m *GameEndS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEndS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nums) > 0 {
		for _, msg := range m.Nums {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMyDemo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.WinColor))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Mvpid))
	return i, nil
}

func (m *GameEndS2CMsgPlayerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEndS2CMsgPlayerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Cellnum))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Color))
	return i, nil
}

func (m *GameEnergyS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEnergyS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Color))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.LastColor))
	return i, nil
}

func (m *SynTimeS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SynTimeS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Tloop))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Minute))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Second))
	return i, nil
}

func (m *CreateItemsS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateItemsS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Row))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Col))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Item))
	return i, nil
}

func (m *DestroyItemsS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroyItemsS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Row))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Col))
	return i, nil
}

func (m *GetItemS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetItemS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Item))
	return i, nil
}

func (m *UseItemC2SMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseItemC2SMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Item))
	return i, nil
}

func (m *DyeingS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DyeingS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PassiveId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.ActiveId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Color))
	return i, nil
}

func (m *DisDyeingS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisDyeingS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PassiveId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Color))
	return i, nil
}

func (m *VirusCreateS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirusCreateS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Row))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Col))
	return i, nil
}

func (m *VirusDestroyS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirusDestroyS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Row))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Col))
	return i, nil
}

func (m *PlayerImprisonS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerImprisonS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Time))
	return i, nil
}

func (m *PlayerDizzyS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDizzyS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Time))
	return i, nil
}

func (m *PlayerSpeedUpS2CMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSpeedUpS2CMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMyDemo(dAtA, i, uint64(m.SpeedNum))
	return i, nil
}

func encodeFixed64MyDemo(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MyDemo(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMyDemo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MoveC2SMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	n += 5
	n += 5
	n += 5
	n += 1 + sovMyDemo(uint64(m.MType))
	return n
}

func (m *MoveS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	n += 5
	n += 5
	n += 5
	n += 1 + sovMyDemo(uint64(m.Row))
	n += 1 + sovMyDemo(uint64(m.Col))
	n += 1 + sovMyDemo(uint64(m.MType))
	return n
}

func (m *LoginC2SMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovMyDemo(uint64(l))
	return n
}

func (m *LoginS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	return n
}

func (m *SearchC2SMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	return n
}

func (m *MatchS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.CurrentNum))
	n += 1 + sovMyDemo(uint64(m.TotalNum))
	return n
}

func (m *SearchS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.RoomId))
	if len(m.Nums) > 0 {
		for _, e := range m.Nums {
			l = e.Size()
			n += 1 + l + sovMyDemo(uint64(l))
		}
	}
	return n
}

func (m *SearchS2CMsgPlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	l = len(m.Name)
	n += 1 + l + sovMyDemo(uint64(l))
	return n
}

func (m *GameStartS2CMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Nums) > 0 {
		for _, e := range m.Nums {
			l = e.Size()
			n += 1 + l + sovMyDemo(uint64(l))
		}
	}
	n += 1 + sovMyDemo(uint64(m.Edgenum))
	return n
}

func (m *GameStartS2CMsgPosition) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	n += 1 + sovMyDemo(uint64(m.Row))
	n += 1 + sovMyDemo(uint64(m.Col))
	n += 1 + sovMyDemo(uint64(m.Color))
	return n
}

func (m *ChangeColorS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.Color))
	n += 1 + sovMyDemo(uint64(m.Row))
	n += 1 + sovMyDemo(uint64(m.Col))
	return n
}

func (m *GameEndS2CMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Nums) > 0 {
		for _, e := range m.Nums {
			l = e.Size()
			n += 1 + l + sovMyDemo(uint64(l))
		}
	}
	n += 1 + sovMyDemo(uint64(m.WinColor))
	n += 1 + sovMyDemo(uint64(m.Mvpid))
	return n
}

func (m *GameEndS2CMsgPlayerMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	l = len(m.Name)
	n += 1 + l + sovMyDemo(uint64(l))
	n += 1 + sovMyDemo(uint64(m.Cellnum))
	n += 1 + sovMyDemo(uint64(m.Color))
	return n
}

func (m *GameEnergyS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.Color))
	n += 1 + sovMyDemo(uint64(m.Status))
	n += 1 + sovMyDemo(uint64(m.LastColor))
	return n
}

func (m *SynTimeS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.Tloop))
	n += 1 + sovMyDemo(uint64(m.Minute))
	n += 1 + sovMyDemo(uint64(m.Second))
	return n
}

func (m *CreateItemsS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.Row))
	n += 1 + sovMyDemo(uint64(m.Col))
	n += 1 + sovMyDemo(uint64(m.Item))
	return n
}

func (m *DestroyItemsS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.Row))
	n += 1 + sovMyDemo(uint64(m.Col))
	return n
}

func (m *GetItemS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.Item))
	return n
}

func (m *UseItemC2SMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.Item))
	return n
}

func (m *DyeingS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PassiveId))
	n += 1 + sovMyDemo(uint64(m.ActiveId))
	n += 1 + sovMyDemo(uint64(m.Color))
	return n
}

func (m *DisDyeingS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PassiveId))
	n += 1 + sovMyDemo(uint64(m.Color))
	return n
}

func (m *VirusCreateS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	n += 1 + sovMyDemo(uint64(m.Row))
	n += 1 + sovMyDemo(uint64(m.Col))
	return n
}

func (m *VirusDestroyS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.Row))
	n += 1 + sovMyDemo(uint64(m.Col))
	return n
}

func (m *PlayerImprisonS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	n += 1 + sovMyDemo(uint64(m.Time))
	return n
}

func (m *PlayerDizzyS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	n += 1 + sovMyDemo(uint64(m.Time))
	return n
}

func (m *PlayerSpeedUpS2CMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMyDemo(uint64(m.PlayerId))
	n += 1 + sovMyDemo(uint64(m.Time))
	n += 1 + sovMyDemo(uint64(m.SpeedNum))
	return n
}

func sovMyDemo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMyDemo(x uint64) (n int) {
	return sovMyDemo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MoveC2SMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveC2SMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveC2SMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosX = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosY = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosZ = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= (MoveType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("posX")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("posY")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("posZ")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("mType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosX = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosY = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosZ = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= (MoveType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("posX")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("posY")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("posZ")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("row")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("col")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("mType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginC2SMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginC2SMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginC2SMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchC2SMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchC2SMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchC2SMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNum", wireType)
			}
			m.CurrentNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("currentNum")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("totalNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMyDemo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nums = append(m.Nums, &SearchS2CMsgPlayer{})
			if err := m.Nums[len(m.Nums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("roomId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchS2CMsgPlayer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameStartS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameStartS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameStartS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMyDemo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nums = append(m.Nums, &GameStartS2CMsgPosition{})
			if err := m.Nums[len(m.Nums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edgenum", wireType)
			}
			m.Edgenum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Edgenum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("edgenum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameStartS2CMsgPosition) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (ColorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("row")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("col")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("color")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeColorS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeColorS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeColorS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (ColorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("color")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("row")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("col")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameEndS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameEndS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameEndS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMyDemo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nums = append(m.Nums, &GameEndS2CMsgPlayerMsg{})
			if err := m.Nums[len(m.Nums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinColor", wireType)
			}
			m.WinColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinColor |= (ColorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mvpid", wireType)
			}
			m.Mvpid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mvpid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("winColor")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("mvpid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameEndS2CMsgPlayerMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: playerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: playerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellnum", wireType)
			}
			m.Cellnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cellnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (ColorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cellnum")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("color")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameEnergyS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameEnergyS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameEnergyS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (ColorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastColor", wireType)
			}
			m.LastColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastColor |= (ColorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("color")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastColor")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SynTimeS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SynTimeS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SynTimeS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tloop", wireType)
			}
			m.Tloop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tloop |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minute", wireType)
			}
			m.Minute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minute |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			m.Second = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Second |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("tloop")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("minute")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("second")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateItemsS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateItemsS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateItemsS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= (ItemType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("row")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("col")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("item")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroyItemsS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyItemsS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyItemsS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("row")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("col")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetItemS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetItemS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetItemS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= (ItemType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("item")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseItemC2SMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItemC2SMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItemC2SMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= (ItemType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("item")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DyeingS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DyeingS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DyeingS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveId", wireType)
			}
			m.PassiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassiveId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveId", wireType)
			}
			m.ActiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (ColorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("passiveId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("activeId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("color")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisDyeingS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisDyeingS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisDyeingS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveId", wireType)
			}
			m.PassiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassiveId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (ColorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("passiveId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("color")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirusCreateS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirusCreateS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirusCreateS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("row")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("col")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirusDestroyS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirusDestroyS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirusDestroyS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("row")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("col")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerImprisonS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerImprisonS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerImprisonS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDizzyS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDizzyS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDizzyS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerSpeedUpS2CMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSpeedUpS2CMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSpeedUpS2CMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedNum", wireType)
			}
			m.SpeedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpeedNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMyDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("speedNum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMyDemo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMyDemo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMyDemo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMyDemo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMyDemo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMyDemo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMyDemo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMyDemo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("MyDemo.proto", fileDescriptorMyDemo) }

var fileDescriptorMyDemo = []byte{
	// 1082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x5f, 0xdb, 0xf9, 0xfb, 0x92, 0xec, 0x4e, 0xa6, 0xa5, 0x44, 0xab, 0xd5, 0x12, 0x2c, 0x24,
	0x96, 0x45, 0x84, 0x6a, 0x55, 0x7a, 0xea, 0xa9, 0x09, 0x54, 0x95, 0xd8, 0x82, 0x36, 0x5d, 0x44,
	0x7b, 0x33, 0xf1, 0xe0, 0xb5, 0xb0, 0x3d, 0xc6, 0x33, 0xce, 0x2a, 0x3d, 0x71, 0xe0, 0xc8, 0x81,
	0x1b, 0x7c, 0x00, 0x6e, 0x9c, 0xf8, 0x16, 0x3d, 0x72, 0x47, 0x42, 0x68, 0xf9, 0x10, 0x5c, 0xd1,
	0x1b, 0x8f, 0x1d, 0x3b, 0xa8, 0xe0, 0x74, 0x91, 0x7a, 0xf3, 0xfc, 0xe6, 0xcd, 0x7b, 0xbf, 0xf7,
	0xde, 0x6f, 0x9e, 0x07, 0xfa, 0xa7, 0xab, 0x19, 0x0b, 0xf9, 0x24, 0x4e, 0xb8, 0xe4, 0xb4, 0x9d,
	0x0a, 0x96, 0x2c, 0x42, 0xd7, 0xfe, 0xd9, 0x00, 0x38, 0xe5, 0x4b, 0x36, 0x3d, 0x99, 0x9f, 0x0a,
	0x8f, 0x8e, 0xa1, 0x13, 0x07, 0xce, 0x8a, 0x25, 0x0f, 0xdd, 0x91, 0x31, 0x36, 0x8f, 0x06, 0xf7,
	0x1b, 0xcf, 0x7f, 0x7f, 0x63, 0xe7, 0xac, 0x40, 0xe9, 0x08, 0x1a, 0x31, 0x17, 0x9f, 0x8f, 0xcc,
	0xb1, 0x79, 0x64, 0xea, 0x5d, 0x85, 0xe8, 0x9d, 0x27, 0x23, 0x6b, 0x63, 0xe7, 0x89, 0xde, 0x79,
	0x3a, 0x6a, 0x6c, 0xec, 0x3c, 0xa5, 0xef, 0x41, 0x33, 0x7c, 0xbc, 0x8a, 0xd9, 0xa8, 0x39, 0x36,
	0x8f, 0x76, 0x4f, 0x86, 0x13, 0xcd, 0x6b, 0x12, 0xf2, 0x25, 0xc3, 0x0d, 0x6d, 0x9d, 0x59, 0xd9,
	0xbf, 0x69, 0xb6, 0xf3, 0x93, 0xe9, 0xab, 0x60, 0x7b, 0x0b, 0xac, 0x84, 0x5f, 0x2a, 0xae, 0x79,
	0x28, 0x04, 0x10, 0x5f, 0xf0, 0x60, 0xd4, 0x2a, 0xe3, 0x0b, 0x1e, 0xac, 0xb3, 0x6b, 0xd7, 0xca,
	0xee, 0x6d, 0xe8, 0x7d, 0xcc, 0x3d, 0x3f, 0xd2, 0xbd, 0x18, 0x41, 0x23, 0x72, 0x42, 0xa6, 0x32,
	0xeb, 0xe6, 0x3c, 0x10, 0xb1, 0xdf, 0xd7, 0x86, 0x75, 0xcb, 0x60, 0xdf, 0x86, 0xfe, 0x9c, 0x39,
	0xc9, 0xe2, 0xa2, 0x6e, 0x9b, 0xed, 0x73, 0xe8, 0x9d, 0x3a, 0x72, 0x71, 0xa1, 0x43, 0xbc, 0x05,
	0xb0, 0x48, 0x93, 0x84, 0x45, 0xf2, 0x51, 0x1a, 0x56, 0x8e, 0x94, 0x70, 0x74, 0x2b, 0xb9, 0x74,
	0x02, 0xb4, 0x31, 0xcb, 0x6e, 0x73, 0xd4, 0xfe, 0xc9, 0xc8, 0x99, 0x68, 0xc7, 0x07, 0xd0, 0x4a,
	0x38, 0x0f, 0x37, 0x78, 0x68, 0x8c, 0xde, 0x86, 0x46, 0x94, 0x86, 0x62, 0x64, 0x8e, 0xad, 0xa3,
	0xde, 0xc9, 0x41, 0x51, 0xbf, 0xb2, 0x8b, 0x49, 0xc6, 0xf9, 0x4c, 0x59, 0xee, 0xcf, 0xa0, 0x95,
	0xad, 0xeb, 0x89, 0x43, 0x15, 0xd8, 0xfc, 0x47, 0x81, 0xff, 0x32, 0x60, 0xef, 0x81, 0x13, 0xb2,
	0xb9, 0x74, 0x12, 0xa9, 0x99, 0x7e, 0xa0, 0xb9, 0x18, 0x8a, 0xcb, 0x9b, 0x05, 0x97, 0x0d, 0xbb,
	0x49, 0xcc, 0x85, 0x2f, 0x7d, 0x1e, 0x65, 0x84, 0xe8, 0x21, 0xb4, 0x99, 0xeb, 0xb1, 0x68, 0xa3,
	0x24, 0x39, 0xb8, 0xff, 0x9d, 0x01, 0x9d, 0xfc, 0x48, 0x0d, 0xce, 0x5a, 0x82, 0xe6, 0x0b, 0x24,
	0x68, 0x6d, 0x4a, 0x70, 0x02, 0xcd, 0x05, 0x0f, 0x78, 0xa2, 0xd4, 0xbc, 0x7b, 0x42, 0x0b, 0xda,
	0x0a, 0x2d, 0x6b, 0x50, 0x01, 0xb6, 0x80, 0xe1, 0xf4, 0xc2, 0x89, 0x3c, 0x36, 0xc5, 0xa5, 0x4e,
	0xbd, 0x70, 0x62, 0xd4, 0x72, 0xb2, 0x2d, 0x49, 0xfb, 0x17, 0x13, 0x06, 0x58, 0xc6, 0x0f, 0x23,
	0x57, 0x47, 0xbc, 0x53, 0x29, 0xf6, 0xb8, 0x52, 0xec, 0xc2, 0x4a, 0x77, 0xfe, 0x54, 0x78, 0xba,
	0xd6, 0x77, 0xa0, 0x73, 0xe9, 0x47, 0x8a, 0xb9, 0x0a, 0xfe, 0x6f, 0x54, 0x0b, 0x4b, 0xba, 0x0f,
	0xcd, 0x70, 0x19, 0xfb, 0x6e, 0x85, 0x57, 0x06, 0xed, 0xff, 0x60, 0x40, 0xb7, 0x88, 0x72, 0x1d,
	0x49, 0xa1, 0x0e, 0x16, 0x2c, 0x08, 0x50, 0x07, 0xe5, 0x38, 0x39, 0xb8, 0x75, 0xa3, 0x7e, 0x34,
	0x80, 0x64, 0xd5, 0x60, 0x89, 0xb7, 0x7a, 0xc9, 0x46, 0x1d, 0x40, 0x4b, 0x48, 0x47, 0xa6, 0xa2,
	0xd2, 0x2b, 0x8d, 0xd1, 0xbb, 0xd0, 0x0d, 0x1c, 0x21, 0xb3, 0x7a, 0x5a, 0xff, 0xe1, 0x71, 0x6d,
	0x6a, 0x7b, 0x30, 0x98, 0xaf, 0xa2, 0xc7, 0x7e, 0x98, 0xcf, 0xe9, 0x7d, 0x68, 0xca, 0x80, 0xf3,
	0xb8, 0x52, 0xb4, 0x0c, 0x42, 0x0a, 0xa1, 0x1f, 0xa5, 0x92, 0x55, 0x29, 0x64, 0x98, 0x22, 0xc8,
	0x16, 0x3c, 0xaa, 0x36, 0x47, 0x63, 0x76, 0x0c, 0xc3, 0x69, 0xc2, 0x1c, 0xc9, 0x1e, 0x4a, 0x16,
	0x0a, 0x1d, 0x4c, 0x8b, 0xcf, 0x78, 0x81, 0xf8, 0xcc, 0xcd, 0x1b, 0xf2, 0x2e, 0x34, 0x7c, 0xc9,
	0x42, 0x9d, 0xe0, 0x7a, 0x46, 0x23, 0x58, 0xca, 0x4f, 0x19, 0xd9, 0x33, 0xa0, 0x33, 0x26, 0x64,
	0xc2, 0x57, 0xd7, 0x08, 0x69, 0xdf, 0x83, 0xc1, 0x03, 0x26, 0xd1, 0x83, 0x76, 0x90, 0x73, 0x30,
	0xea, 0x70, 0xb8, 0x07, 0x83, 0x73, 0xa1, 0x52, 0xd6, 0xd3, 0x7c, 0xab, 0xd3, 0xdf, 0x1a, 0xd0,
	0x9f, 0xad, 0x98, 0x1f, 0x79, 0x3a, 0xb6, 0x0d, 0xdd, 0xd8, 0x11, 0xc2, 0x5f, 0xb2, 0x0d, 0x55,
	0xaf, 0x61, 0x14, 0xbe, 0xb3, 0x90, 0x99, 0x49, 0x65, 0xb0, 0xe7, 0xe8, 0x5a, 0x79, 0x56, 0x3d,
	0xf9, 0x32, 0xd8, 0x9b, 0xf9, 0x62, 0x6b, 0x22, 0x45, 0x18, 0xb3, 0x6e, 0x98, 0xe1, 0x67, 0x7e,
	0x92, 0x8a, 0x4c, 0x26, 0xb5, 0x9f, 0x0d, 0xdb, 0x0e, 0xb0, 0x19, 0x50, 0x15, 0x46, 0x6b, 0xe3,
	0x25, 0x65, 0x71, 0x06, 0x37, 0x3f, 0xcd, 0x18, 0x84, 0x71, 0xe2, 0x0b, 0x1e, 0x6d, 0xf3, 0xcc,
	0x91, 0x7e, 0x58, 0xbd, 0x42, 0x0a, 0xb1, 0x3f, 0x81, 0x61, 0xe6, 0x73, 0xe6, 0x3f, 0x7b, 0xb6,
	0xfa, 0x1f, 0x1c, 0x0a, 0xb8, 0x91, 0x39, 0x9c, 0xc7, 0x8c, 0xb9, 0xe7, 0xf1, 0xf5, 0x5d, 0xe2,
	0x59, 0x81, 0xce, 0x1e, 0x6d, 0xcc, 0xc6, 0x02, 0x3d, 0xfe, 0xc6, 0x82, 0x1e, 0xbe, 0x5e, 0xb1,
	0xc1, 0xd3, 0xd0, 0xa5, 0x3d, 0x68, 0xe3, 0x33, 0xf0, 0x8c, 0x7d, 0x4d, 0x8c, 0xf5, 0x42, 0x10,
	0x93, 0xf6, 0xa1, 0xa3, 0x9e, 0x46, 0xb8, 0x65, 0x95, 0x56, 0x82, 0x34, 0xe8, 0x00, 0xba, 0xd9,
	0xc3, 0x01, 0x37, 0x9b, 0xe5, 0xa5, 0x20, 0x2d, 0x5c, 0x16, 0xbf, 0x72, 0xd2, 0xa6, 0x14, 0x76,
	0x4b, 0x3f, 0x42, 0x34, 0xe9, 0x62, 0x24, 0xfd, 0x03, 0x22, 0x40, 0x77, 0x01, 0xd6, 0xf3, 0x97,
	0xf4, 0x30, 0x16, 0xae, 0x71, 0xec, 0x91, 0x3e, 0xee, 0xaa, 0x1b, 0xaa, 0x74, 0x47, 0x06, 0x74,
	0x0f, 0x7a, 0xb8, 0xd6, 0x02, 0x21, 0xbb, 0x74, 0x08, 0x83, 0xac, 0x8e, 0x7a, 0x12, 0x90, 0xbd,
	0x35, 0xa4, 0xaf, 0x37, 0x21, 0x48, 0x2a, 0xbb, 0x23, 0xd3, 0xd0, 0x25, 0x43, 0x4a, 0xa0, 0x5f,
	0xdc, 0x1a, 0x44, 0x28, 0xfa, 0x2d, 0x09, 0x9c, 0xdc, 0x40, 0x93, 0xb2, 0x14, 0xc9, 0x4d, 0xcc,
	0xa4, 0x2a, 0x2b, 0xf2, 0x1a, 0x1e, 0x2b, 0xc9, 0x82, 0xdc, 0x42, 0xf6, 0xea, 0xbd, 0x87, 0x89,
	0xbe, 0xbe, 0x66, 0xa2, 0x9b, 0x4c, 0x46, 0xc7, 0xef, 0x40, 0x27, 0x7f, 0xb5, 0xd2, 0x0e, 0x34,
	0x7c, 0x37, 0x60, 0x64, 0x07, 0xbf, 0x02, 0xf6, 0xa5, 0x24, 0x06, 0xed, 0x42, 0x33, 0xf1, 0xbd,
	0x0b, 0x49, 0xcc, 0xe3, 0xbb, 0xd0, 0x2d, 0xae, 0x23, 0x05, 0x68, 0xf1, 0xc4, 0xf7, 0xfc, 0x88,
	0xec, 0xd0, 0x36, 0x58, 0x09, 0x73, 0x89, 0x81, 0xe0, 0x8a, 0x05, 0x01, 0xbf, 0x24, 0x26, 0xba,
	0xf8, 0x22, 0x48, 0x19, 0xb1, 0x8e, 0x3f, 0x82, 0x4e, 0x3e, 0xb2, 0xb0, 0xd4, 0x69, 0xf4, 0x55,
	0xc4, 0x2f, 0xf1, 0x5c, 0x17, 0x9a, 0x4b, 0xcc, 0x29, 0x3b, 0xe9, 0xaa, 0xf4, 0x89, 0x89, 0xb0,
	0xab, 0xe8, 0x5b, 0x68, 0xae, 0xc4, 0x92, 0xc6, 0xa4, 0x71, 0x9f, 0x3c, 0xbf, 0x3a, 0x34, 0x7e,
	0xbd, 0x3a, 0x34, 0xfe, 0xb8, 0x3a, 0x34, 0xbe, 0xff, 0xf3, 0x70, 0xe7, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe8, 0x8e, 0x47, 0x28, 0xfd, 0x0c, 0x00, 0x00,
}
