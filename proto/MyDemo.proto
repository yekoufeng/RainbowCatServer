syntax = "proto2";

package usercmd;

enum DemoTypeCmd {
	MoveReq = 1; 
	MoveRes = 2; 
	LoginReq = 3;
	LoginRes = 4;
	SearchReq = 5;
	SearchRes = 6;
	GameStart = 7;//游戏开始
	ChangeColorRes = 9;
	GameEnd = 10;//游戏结束
	
	GameEnergy = 11;//能量条信息
}
//客户端发送当前位置
message MoveC2SMsg{
	required uint32 playerId = 1;
	required float posX = 2;
	required float posY = 3;
	required float posZ = 4;
}
//服务器广播房间内该玩家位置
message MoveS2CMsg {
	required uint32 playerId = 1;
	required float posX = 2;
	required float posY = 3;
	required float posZ = 4;
}
//客户端发送登录请求  name = 玩家 + random(1~999) 
// 比如叫玩家233或者玩家012
message LoginC2SMsg{
	required string name = 1;
}
//服务器判断回传登陆响应  
//玩家的个人id  
message LoginS2CMsg{
	required uint32 playerId = 1;
}

//客户端请求游戏匹配
message SearchC2SMsg{
	required uint32 playerId = 1;
}

//服务器通知匹配信息
message SearchS2CMsg{
	message player
	{
		required uint32 playerId = 1; // 所有房间内玩家id
		required string name = 2;//所有房间内玩家名称
	}
	required uint32 roomId = 1;//房间的id
    repeated player nums  = 2; // 队员个数
	 
}

//服务器主动推送
//游戏开始消息用于初始化信息  目前 是推送每个玩家角色的出生位置
message GameStartS2CMsg{
	message position
	{
		required uint32 playerId = 1;
		required uint32 row = 2;
		required uint32 col = 3;
		required colorType color = 4;
	}
	repeated position nums = 1;
	required uint32 edgenum = 2;//地图边长  正方形
}

enum colorType{
	origin = 0;
	red = 1;
	yellow = 2;
	blue = 3;
}

//服务器广播  变色方块位置
message ChangeColorS2CMsg {
	required colorType color = 1;
	required uint32 row = 2; //hang
	required uint32 col = 3; //lie
}

//服务器主动推送
//游戏倒计时1分钟后结束主动发送的消息
message GameEndS2CMsg{
	required colorType color = 1;//获胜者队伍颜色
	required uint32 num = 2;//获胜者最终颜色格子数目
}

//服务器主动推送
//能量条信息
message GameEnergyS2CMsg{
	required colorType color = 1;  //当前显示什么颜色
	required uint32 status = 2;		//队伍颜色能量进度条进度值
}